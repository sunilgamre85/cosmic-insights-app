// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview A service for performing astrological calculations.
 * This will eventually house the logic for generating Kundli charts
 * using the Swiss Ephemeris library.
 */
import * as swisseph from 'swisseph';

// Promisify the swisseph functions we need
const swe_julday_promise = (
  year: number, month: number, day: number, hour: number, gregflag: number
): Promise<number> => {
  return new Promise((resolve, reject) => {
    swisseph.swe_julday(year, month, day, hour, gregflag, (julday_ut) => {
      if (julday_ut) {
        resolve(julday_ut);
      } else {
        reject('Failed to calculate Julian Day.');
      }
    });
  });
};

const swe_calc_ut_promise = (tjd_ut: number, ipl: number, iflag: number): Promise<any> => {
  return new Promise((resolve, reject) => {
    swisseph.swe_calc_ut(tjd_ut, ipl, iflag, (result) => {
      if (result.return_code === 0) {
        resolve(result);
      } else {
        reject(result.error_message);
      }
    });
  });
};

const swe_houses_promise = (tjd_ut: number, lat: number, lon: number, hsys: string): Promise<any> => {
    return new Promise((resolve, reject) => {
        swisseph.swe_houses(tjd_ut, lat, lon, hsys, (result) => {
            if (result.return_code === 0) {
                resolve(result);
            } else {
                reject(result.error_message);
            }
        });
    });
};

const PLANETS = [
  { id: swisseph.SE_SUN, name: 'Sun' },
  { id: swisseph.SE_MOON, name: 'Moon' },
  { id: swisseph.SE_MERCURY, name: 'Mercury' },
  { id: swisseph.SE_VENUS, name: 'Venus' },
  { id: swisseph.SE_MARS, name: 'Mars' },
  { id: swisseph.SE_JUPITER, name: 'Jupiter' },
  { id: swisseph.SE_SATURN, name: 'Saturn' },
  { id: swisseph.SE_TRUE_NODE, name: 'Rahu' }, // True Node for Rahu
];

const ZODIAC_SIGNS = [
    'Aries', 'Taurus', 'Gemini', 'Cancer', 'Leo', 'Virgo',
    'Libra', 'Scorpio', 'Sagittarius', 'Capricorn', 'Aquarius', 'Pisces'
];

function getSign(degree: number): string {
    return ZODIAC_SIGNS[Math.floor(degree / 30)];
}

function getHouse(degree: number, houseCusps: number[]): number {
    const houseCusps12 = [...houseCusps, houseCusps[0] + 360];
    for (let i = 0; i < 12; i++) {
        const cusp1 = houseCusps[i];
        let cusp2 = houseCusps[i + 1];

        // Handle the 12th house wrap-around to the 1st house
        if (i === 11) {
            cusp2 = houseCusps[0] + 360;
        }

        if (cusp2 < cusp1) { // Normal case for houses that cross 0 degree Aries
            if (degree >= cusp1 && degree < cusp2) {
                return i + 1;
            }
        } else { // Special case for houses that cross 0 degree Aries
            if (degree >= cusp1 || degree < cusp2) {
                // This logic needs to be more robust, for now this is a simplification
                if (degree >= cusp1 && degree < 360) return i + 1;
                if (degree >= 0 && degree < cusp2) return i + 1;
            }
        }
    }

    // Fallback logic for degrees that might not fit cleanly
    for (let i = 0; i < 12; i++) {
      const start = houseCusps[i];
      const end = houseCusps[(i + 1) % 12];
      if (start < end) {
        if (degree >= start && degree < end) return i + 1;
      } else { // Wraps around 0/360
        if (degree >= start || degree < end) return i + 1;
      }
    }
    
    return -1; // Should not happen
}

interface KundliInput {
    date: Date;
    lat: number;
    lon: number;
}

export interface PlanetData {
    name: string;
    degree: number;
    sign: string;
    house: number;
}

/**
 * Calculates the core Kundli data (planetary positions and ascendant).
 */
export const getKundliData = async ({ date, lat, lon }: KundliInput): Promise<{ascendant: {degree: number, sign: string}, planets: PlanetData[]}> => {
  try {
    const year = date.getUTCFullYear();
    const month = date.getUTCMonth() + 1;
    const day = date.getUTCDate();
    const hours = date.getUTCHours();
    const minutes = date.getUTCMinutes();
    const seconds = date.getUTCSeconds();
    const hour_decimal = hours + minutes / 60 + seconds / 3600;

    // Set ephemeris path
    swisseph.swe_set_ephe_path(__dirname + '/../../ephe');

    const julday_ut = await swe_julday_promise(year, month, day, hour_decimal, swisseph.SE_GREG_CAL);

    // Calculate house cusps (including Ascendant)
    const houses = await swe_houses_promise(julday_ut, lat, lon, 'P');
    const houseCusps = houses.house.slice(1); // house[0] is not used
    const ascendantDegree = houseCusps[0];
    
    // Calculate Sidereal positions for planets
    swisseph.swe_set_sid_mode(swisseph.SE_SIDM_LAHIRI, 0, 0);
    const iflag = swisseph.SEFLG_SWIEPH | swisseph.SEFLG_SIDEREAL;

    const planetPositions = await Promise.all(
      PLANETS.map(async (planet) => {
        const pos = await swe_calc_ut_promise(julday_ut, planet.id, iflag);
        const degree = pos.longitude;
        return {
          name: planet.name,
          degree: parseFloat(degree.toFixed(2)),
          sign: getSign(degree),
          house: getHouse(degree, houseCusps),
        };
      })
    );
    
    return {
      ascendant: {
        degree: parseFloat(ascendantDegree.toFixed(2)),
        sign: getSign(ascendantDegree)
      },
      planets: planetPositions,
    };

  } catch (error) {
    console.error('Error in getKundliData:', error);
    throw new Error('Failed to calculate Kundli data using Swiss Ephemeris.');
  }
};


/**
 * Calculates astrological doshas based on planet positions.
 */
export const getDoshas = (planets: PlanetData[]): { name: string; description: string }[] => {
    const doshas: { name: string; description: string }[] = [];

    // Mangal Dosha (Mars in 1, 4, 7, 8, 12th house)
    const mars = planets.find(p => p.name === 'Mars');
    if (mars) {
        const mangalDoshaHouses = [1, 4, 7, 8, 12];
        if (mangalDoshaHouses.includes(mars.house)) {
            doshas.push({
                name: "Mangal Dosha",
                description: `Present because Mars is in the ${mars.house}th house.`
            });
        }
    }
    
    // Placeholder for other doshas like Kaal Sarp
    
    return doshas;
};
