// This is an autogenerated file from Firebase Studio.
// janam-kundli-analysis.ts

import { applyAyanamsa } from './ayanamsa';
import { getAscendant, getHouses } from './houses';
import { getJulianDay } from './julian';
import { getPlanetPositions } from './planet';
import { getVimshottariDasha } from './vimshottari-dasha';
import { detectYogas } from './yogas';

// Placeholder for Step 7

function getSign(degree: number): string {
    const signs = [
        'Aries', 'Taurus', 'Gemini', 'Cancer', 'Leo', 'Virgo', 'Libra', 
        'Scorpio', 'Sagittarius', 'Capricorn', 'Aquarius', 'Pisces'
    ];
    const signIndex = Math.floor(degree / 30);
    return signs[signIndex % 12];
}

export async function generateJanamKundli({
  date,
  time,
  lat,
  lon
}: {
  date: string; // 'YYYY-MM-DD'
  time: string; // 'HH:mm'
  lat: number;
  lon: number;
}) {
  const fullDate = new Date(`${date}T${time}:00Z`);
  const jd = getJulianDay(fullDate);

  // 1. Calculate ascendant and houses
  const ascendantDegree = getAscendant(fullDate, lat, lon);
  const ascendantSign = getSign(ascendantDegree);
  const houseCusps = getHouses(ascendantDegree);
    const houseSigns: Record<string, string> = Object.fromEntries(
        Object.entries(houseCusps).map(([house, degree]) => [house, getSign(degree)])
    );


  // 2. Calculate sidereal planet positions
  const tropicalPositions = getPlanetPositions(jd);
  const siderealPositions: { [key: string]: { degree: number; sign: string, house: number } } = {};

  for (const planet in tropicalPositions) {
      const tropicalLon = tropicalPositions[planet];
      const siderealLon = applyAyanamsa(tropicalLon, jd);
      
      let house = 1;
      // This is a simplified house calculation. A more precise system like Placidus would be more complex.
      for (let i = 1; i <= 12; i++) {
          const houseStart = houseCusps[i];
          const nextHouse = i === 12 ? 1 : i + 1;
          const houseEnd = houseCusps[nextHouse];
          
          if (houseStart < houseEnd) { // Normal case
              if (siderealLon >= houseStart && siderealLon < houseEnd) {
                  house = i;
                  break;
              }
          } else { // Houses crossing 0 degree Aries
              if (siderealLon >= houseStart || siderealLon < houseEnd) {
                  house = i;
                  break;
              }
          }
      }

      siderealPositions[planet] = {
          degree: parseFloat(siderealLon.toFixed(2)),
          sign: getSign(siderealLon),
          house: house,
      };
  }

  // 3. Calculate Dasha
  const dasha = getVimshottariDasha(fullDate, lat, lon);

  // 4. Detect Yogas
  const yogas = detectYogas(siderealPositions, houseSigns);

  // 5. Structure the final JSON
  const kundliJson = {
    birth: {
      date,
      time,
      lat,
      lon,
    },
    ascendant: ascendantSign,
    planets: siderealPositions,
    houses: houseSigns,
    dasha,
    yogas,
    generatedAt: new Date().toISOString(),
  };

  return kundliJson;
}

