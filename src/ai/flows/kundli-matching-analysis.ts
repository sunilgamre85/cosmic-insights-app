// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview A Kundli Matching (Ashtakoot Milan) analysis AI agent.
 *
 * - kundliMatchingAnalysis - A function that handles the Kundli Matching analysis process.
 * - KundliMatchingAnalysisInput - The input type for the kundliMatchingAnalysis function.
 * - KundliMatchingAnalysisOutput - The return type for the kundliMatchingAnalysis function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const PersonDetailsSchema = z.object({
  name: z.string().describe('The name of the person.'),
  dateOfBirth: z.string().describe('The date of birth of the person (YYYY-MM-DD).'),
  timeOfBirth: z.string().describe('The time of birth of the person (HH:MM).'),
  placeOfBirth: z.string().describe('The place of birth of the person (e.g., city, region, country).'),
});

const KundliMatchingAnalysisInputSchema = z.object({
  person1: PersonDetailsSchema,
  person2: PersonDetailsSchema,
});
export type KundliMatchingAnalysisInput = z.infer<typeof KundliMatchingAnalysisInputSchema>;

const KundliMatchingAnalysisOutputSchema = z.object({
    compatibilityScore: z.number().describe('The compatibility score out of 36 based on Ashtakoot Milan.'),
    summary: z.string().describe('A summary of the compatibility, highlighting strengths and potential challenges.')
});
export type KundliMatchingAnalysisOutput = z.infer<typeof KundliMatchingAnalysisOutputSchema>;

const locationTool = ai.defineTool(
    {
      name: 'findLocation',
      description: 'Find the exact location (city, state, country) for a given place name.',
      inputSchema: z.object({ place: z.string() }),
      outputSchema: z.object({ city: z.string(), state: z.string(), country: z.string() }),
    },
    async (input) => {
      // In a real application, this would call a Geocoding API.
      // For this prototype, we'll simulate it.
      if (input.place.toLowerCase().includes('kandivali')) {
        return { city: 'Mumbai', state: 'Maharashtra', country: 'India' };
      }
      return { city: input.place, state: '', country: '' };
    }
);

export async function kundliMatchingAnalysis(input: KundliMatchingAnalysisInput): Promise<KundliMatchingAnalysisOutput> {
  return kundliMatchingAnalysisFlow(input);
}

const prompt = ai.definePrompt({
  name: 'kundliMatchingAnalysisPrompt',
  input: {schema: KundliMatchingAnalysisInputSchema},
  output: {schema: KundliMatchingAnalysisOutputSchema},
  tools: [locationTool],
  config: {
    temperature: 0,
  },
  prompt: `You are an expert Vedic astrologer specializing in Kundli Matching (Ashtakoot Milan) for marriage compatibility.

Your first step is to use the findLocation tool for EACH person to determine their precise city, state, and country from their provided place of birth. This is essential for accurate astrological calculations.

Analyze the birth details of the two individuals provided below.

Person 1:
Name: {{{person1.name}}}
Date of Birth: {{{person1.dateOfBirth}}}
Time of Birth: {{{person1.timeOfBirth}}}
Place of Birth: {{{person1.placeOfBirth}}}

Person 2:
Name: {{{person2.name}}}
Date of Birth: {{{person2.dateOfBirth}}}
Time of Birth: {{{person2.timeOfBirth}}}
Place of Birth: {{{person2.placeOfBirth}}}

Perform a detailed Ashtakoot Milan. Calculate the Guna score for each of the 8 Kootas (Varna, Vashya, Tara, Yoni, Graha Maitri, Gana, Bhakoot, Nadi) and determine the final compatibility score out of 36.

Provide a summary of the match, explaining the significance of the score. Highlight the key areas of harmony and potential conflict based on the Koota analysis. Mention any major doshas like Nadi Dosha or Bhakoot Dosha if present.`,
});

const kundliMatchingAnalysisFlow = ai.defineFlow(
  {
    name: 'kundliMatchingAnalysisFlow',
    inputSchema: KundliMatchingAnalysisInputSchema,
    outputSchema: KundliMatchingAnalysisOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
