// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview A Janam Kundli analysis AI agent.
 *
 * - janamKundliAnalysis - A function that handles the Janam Kundli analysis process.
 * - JanamKundliAnalysisInput - The input type for the janamKundliAnalysis function.
 * - JanamKundliAnalysisOutput - The return type for the janamKundliAnalysis function.
 */

import {ai} from '@/ai/genkit';
import { getKundliData, getVedicYogasAndDoshas, getVimshottariDasha, type PlanetData, type Mahadasha } from '@/lib/astrology-service';
import {z} from 'genkit';

const JanamKundliAnalysisInputSchema = z.object({
  name: z.string().describe('The name of the person.'),
  dateOfBirth: z.string().describe('The date of birth of the person (YYYY-MM-DD).'),
  timeOfBirth: z.string().describe('The time of birth of the person (HH:MM).'),
  placeOfBirth: z.string().describe('The place of birth of the person (e.g., city, region, country).'),
  lat: z.number().optional().describe('Latitude of the place of birth.'),
  lon: z.number().optional().describe('Longitude of the place of birth.'),
});
export type JanamKundliAnalysisInput = z.infer<typeof JanamKundliAnalysisInputSchema>;

const ChartDataSchema = z.object({
    ascendant: z.string(),
    houses: z.array(z.object({
        house: z.number(),
        sign: z.string(),
        planets: z.array(z.string()),
    }))
});

const JanamKundliAnalysisOutputSchema = z.object({
    report: z.string().describe('A detailed Janam Kundli report including planetary positions, Lagna, Nakshatra, Dasha periods, and their significance.'),
    mahadashas: z.array(z.object({
        dashaLord: z.string(),
        startDate: z.string(),
        endDate: z.string(),
    })).describe('The calculated Vimshottari Mahadasha periods.'),
    chartData: ChartDataSchema.optional().describe('The data required to render the visual birth chart.'),
});
export type JanamKundliAnalysisOutput = z.infer<typeof JanamKundliAnalysisOutputSchema>;

export async function janamKundliAnalysis(input: JanamKundliAnalysisInput): Promise<JanamKundliAnalysisOutput> {
  return janamKundliAnalysisFlow(input);
}

const prompt = ai.definePrompt({
  name: 'janamKundliAnalysisPrompt',
  input: {schema: z.any()},
  output: {schema: z.object({ report: z.string() })}, // AI only generates the report text
  config: {
    temperature: 0.2,
  },
  prompt: `You are an expert Vedic astrologer. Your primary task is to interpret a pre-calculated Janam Kundli (birth chart) and generate a detailed report.

The underlying calculation service is temporarily unavailable. Please generate a sample report for the user with plausible astrological interpretations. Inform the user that this is a sample report while the service is being restored.

User Details:
Name: {{{name}}}
Date of Birth: {{{dateOfBirth}}}
Time of Birth: {{{timeOfBirth}}}
Place of Birth: {{{placeOfBirth}}}

Generate a comprehensive sample Janam Kundli report. The report must include:
1.  A detailed analysis of a sample Lagna (Ascendant).
2.  An interpretation of several sample planet positions.
3.  A section on a sample Yoga or Dosha.
4.  A section on sample Vimshottari Dasha periods.
5.  Provide a comprehensive analysis of career, health, and relationships based on the sample chart.
6.  Suggest simple, practical, and non-superstitious remedies.

Provide a comprehensive, well-structured, and easy-to-understand sample report.`,
});

const janamKundliAnalysisFlow = ai.defineFlow(
  {
    name: 'janamKundliAnalysisFlow',
    inputSchema: JanamKundliAnalysisInputSchema,
    outputSchema: JanamKundliAnalysisOutputSchema,
  },
  async (input): Promise<JanamKundliAnalysisOutput> => {
    // In a real app, you would use a geocoding service to get lat/lon from placeOfBirth
    // For this prototype, we'll use a fixed lat/lon if not provided.
    const lat = input.lat ?? 19.2288; // Default to Kandivali, Mumbai
    const lon = input.lon ?? 72.8540; // Default to Kandivali, Mumbai

    const [year, month, day] = input.dateOfBirth.split('-').map(Number);
    const [hour, minute] = input.timeOfBirth.split(':').map(Number);
    
    // We need the original birth date for Dasha calculation
    const birthDateObj = new Date(year, month - 1, day, hour, minute);

    // The service is temporarily disabled, so we will not call it.
    // const kundliData = await getKundliData({ date: birthDateObj, lat, lon });
    // const yogasAndDoshas = await getVedicYogasAndDoshas(kundliData.planets, kundliData.ascendant.sign);

    // const moon = kundliData.planets.find(p => p.name === 'Moon');
    // if (!moon) throw new Error("Could not calculate Moon's position.");
    // const mahadashas = await getVimshottariDasha(moon.degree, birthDateObj);
    
    // Create dummy data to send to the prompt
    const kundliData = {
        ascendant: { degree: 15, sign: 'Leo' },
        planets: [],
        houseSigns: [],
    };
    const yogasAndDoshas = [{ name: 'Gaj Kesari Yoga', description: 'Formed by Jupiter and Moon.' }];
    const mahadashas = [
        { dashaLord: 'Sun', startDate: '2020-01-01', endDate: '2026-01-01' },
        { dashaLord: 'Moon', startDate: '2026-01-01', endDate: '2036-01-01' },
    ];


    const promptInput = {
        ...input,
        ...kundliData,
        yogasAndDoshas,
        mahadashas
    };

    const {output} = await prompt(promptInput);

    // Prepare data for the visual chart
    // const housesForChart = Array.from({ length: 12 }, (_, i) => ({
    //     house: i + 1,
    //     sign: kundliData.houseSigns[i],
    //     planets: kundliData.planets.filter(p => p.house === i + 1).map(p => p.name.substring(0, 2).toUpperCase())
    // }));
    
    return {
        report: output!.report,
        mahadashas: mahadashas,
        chartData: undefined,
        // chartData: {
        //     ascendant: kundliData.ascendant.sign,
        //     houses: housesForChart
        // }
    };
  }
);
